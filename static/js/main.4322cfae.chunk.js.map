{"version":3,"sources":["components/utility/decodeSpecialChars.ts","theme.ts","components/style/container.tsx","components/svgTick/index.tsx","components/questionCard/index.tsx","components/colorModeSwitcher/index.tsx","images/quiz.png","constants/apiCategories.js","components/optionsCard/index.tsx","utils/API.ts","components/utility/shuffleArray.ts","utils/helpers.ts","components/style/transitions/SwitchTransition.tsx","App.tsx","index.tsx"],"names":["decodeSpecialChars","string","hash","regex","RegExp","Object","keys","join","replace","matched","fonts","heading","body","colors","main","success","blue","breakpoints","createBreakpoints","sm","md","lg","xl","theme","extendTheme","black","primary","surface","error","textStyles","h1","fontSize","lineHeight","letterSpacing","h2","Container","props","console","log","shadowColor","boxShadow","marginTop","direction","alignItems","width","padding","backgroundColor","CircleWithTick","useState","animationStart","setAnimationStart","useEffect","setTimeout","className","style","height","border","position","borderRadius","borderColor","opacity","transition","overflow","viewBox","color","top","left","transform","stroke","strokeDasharray","strokeWidth","strokeLinecap","strokeLinejoin","fill","d","strokeDashoffset","answerColorMap","true","false","null","QuestionCard","question","answer","callback","userAnswer","questionNumber","totalQuestions","isCorrect","currentQuestion","score","mt","justifyContent","map","i","sx","minWidth","display","flexDirection","m","toString","disabled","value","onClick","correct_answer","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","defaultChecked","variant","icon","apiCategories","categoryName","categoryNumber","OptionsCard","setDifficulty","handleDropdownChange","categoryList","category","mb","onChange","event","ml","placeholder","fetchQuestions","amount","difficulty","a","APIendpoint","fetch","json","data","results","answers","array","incorrect_answers","sort","Math","random","startTrivia","setLoading","setGameOver","setQuestions","setScore","setUserAnswers","setNumber","TOTAL_QUESTIONS","newQuestions","SwitchTransitionWrapper","children","nodeRef","refKey","mode","SwitchTransition","CSSTransition","classNames","addEndListener","done","current","addEventListener","ref","App","loading","questions","number","userAnswers","gameOver","setIsCorrect","setCategory","message","setMessage","showNext","setShowNext","React","useRef","buttonRef","textAlign","dir","minH","boxSize","src","logo","minHeight","right","paddingBottom","e","target","maxWidth","colorScheme","flexDir","marginBottom","undefined","currentTarget","correct","prev","length","answerObject","correctAnswer","checkAnswer","in","out","timeout","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4322cfae.chunk.js","sourcesContent":["export const decodeSpecialChars = (string: string) => {\n    const hash: { [key: string]: string } = {\n        '&quot;': '\"',\n        '&#039;': \"'\",\n        '&lt;': '<',\n        '&gt;': '>',\n        '&amp;': '&',\n    }\n    var regex = new RegExp(Object.keys(hash).join('|'), 'gi');\n    let decodedStr = string.replace(regex, function (matched) {\n        return hash[matched];\n    });\n    return decodedStr;\n};\n\n","import { extendTheme, Theme } from \"@chakra-ui/react\";\nimport { createBreakpoints } from \"@chakra-ui/theme-tools\";\n\nconst fonts = {\n  heading: \"Raleway\",\n  body: \"Raleway\",\n};\n\nconst colors = {\n  black: \"#16161D\",\n  primary: {\n    main: \"#59C9A5\",\n    success: \"#FFFD98\",\n  },\n  surface: {\n    main: \"#B9E3C6\",\n    blue: \"#3E92CC\",\n  },\n  error: \"#FE6D73\",\n};\n\nconst breakpoints = createBreakpoints({\n  sm: \"45em\",\n  md: \"55em\",\n  lg: \"65em\",\n  xl: \"75em\",\n});\n\nconst theme = extendTheme({\n  colors: {\n    black: \"#16161D\",\n    primary: {\n      main: \"#59C9A5\",\n      success: \"#FFFD98\",\n    },\n    surface: {\n      main: \"#B9E3C6\",\n      blue: \"#3E92CC\",\n    },\n    error: \"d81e5b\",\n  },\n  fonts,\n  breakpoints,\n  textStyles: {\n    h1: {\n      fontSize: \"35px\",\n      lineHeight: \"110%\",\n      letterSpacing: \"-2%\",\n      fonts: fonts,\n    },\n    h2: {\n      fontSize: \"35px\",\n      lineHeight: \"110%\",\n      letterSpacing: \"-2%\",\n    },\n  },\n});\n\nexport default theme;\nexport { colors };\n","import { Center, Flex } from \"@chakra-ui/react\";\nimport { colors } from \"../../theme\";\n\nconst Container = (props: any) => {\n  console.log(colors.surface.main);\n\n  const shadowColor = \"rgba(185, 227, 198, \";\n  const boxShadow = `${shadowColor}1) -5px 5px,\n  ${shadowColor}0.8) -10px 10px,\n  ${shadowColor}0.6) -15px 15px,\n  ${shadowColor}0.4) -20px 20px,\n  ${shadowColor}0.2) -25px 25px;`;\n  return (\n    <Center>\n      <Flex\n        marginTop={\"90px\"}\n        direction=\"column\"\n        alignItems=\"center\"\n        width={[\"sm\", \"md\", \"lg\", \"xl\"]}\n        padding={\"30px\"}\n        boxShadow={boxShadow}\n        backgroundColor={\"primary.main\"}\n        {...props}\n      ></Flex>\n    </Center>\n  );\n};\n\nexport default Container;\n","import { useEffect, useState } from \"react\";\nimport { colors } from \"../../theme\";\n\nexport default function CircleWithTick({ ...props }) {\n  const [animationStart, setAnimationStart] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setAnimationStart(true);\n    }, 250);\n  }, []);\n\n  return (\n    <div\n      className=\"circle\"\n      style={{\n        width: \"32px\",\n        height: \"32px\",\n        border: \"2px solid #ccc\",\n        position: \"relative\",\n        borderRadius: \"50%\",\n        borderColor: colors.surface.main,\n        opacity: animationStart ? 1 : 0,\n        transition: \"opacity 0.8s ease-out\",\n        overflow: \"hidden\",\n        ...props,\n      }}\n    >\n      <svg\n        viewBox=\"0 0 20 20\"\n        style={{\n          position: \"absolute\",\n          color: \"green\",\n          width: \"24px\",\n          height: \"24px\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: animationStart\n            ? \"translate(-50%, -50%) scale(1)\"\n            : \"translate(-50%, -50%) scale(0)\",\n          stroke: colors.surface.main,\n          strokeDasharray: animationStart ? \"25 0\" : \"0 25\",\n          strokeWidth: \"1\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          fill: \"none\",\n          transition:\n            \"transform 0.6s ease-in, stroke-dasharray 0.6s ease-in-out\",\n        }}\n      >\n        <path\n          d=\"M4.25 10.75L8.5 15\"\n          style={{\n            strokeDashoffset: animationStart ? 0 : 10,\n            transition: \"stroke-dashoffset 0.1s ease-in-out\",\n          }}\n        />\n        <path\n          d=\"M8.5 15L16.75 6.75\"\n          style={{\n            strokeDashoffset: animationStart ? 0 : -15,\n            transition: \"stroke-dashoffset 0.3s ease-in-out\",\n          }}\n        />\n      </svg>\n    </div>\n  );\n}\n","import { Button, Flex, Heading, Text, Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { decodeSpecialChars } from \"../utility/decodeSpecialChars\";\nimport Container from \"../style/container\";\nimport { colors } from \"../../theme\";\nimport CircleWithTick from \"../svgTick\";\n\ntype Props = {\n  question: string;\n  answer: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: any;\n  questionNumber: number;\n  totalQuestions: number;\n  isCorrect: boolean | null;\n  score: number;\n  currentQuestion: any;\n};\n\nconst answerColorMap: Record<string, string> = {\n  true: colors.primary.main,\n  false: colors.error,\n  null: colors.surface.blue,\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answer,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n  isCorrect,\n  currentQuestion,\n  score,\n}) => {\n  console.log(currentQuestion);\n  console.log(userAnswer);\n  return (\n    <Box>\n      <Container padding=\"5\">\n        <Text color={\"black\"} fontSize={[\"sm\", \"md\", \"lg\"]}>\n          Score : {score}\n          <div></div>\n          Question : {questionNumber} / {totalQuestions}\n        </Text>\n        <Heading>\n          <hr></hr>\n          <Text fontSize={\"m\"}>{decodeSpecialChars(question)}</Text>\n        </Heading>\n      </Container>\n      <Flex\n        mt={\"100px\"}\n        direction={\"column\"}\n        justifyContent=\"center\"\n        alignItems={\"center\"}\n      >\n        {answer.map((answer, i) => (\n          <div key={i}>\n            <Box\n              sx={{\n                minWidth: \"564px\",\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n              }}\n            >\n              <Button\n                key={i}\n                m={\"10px\"}\n                width={[\"sm\", \"md\", \"lg\"]}\n                fontSize={[\"sm\", \"md\", \"lg\"]}\n                backgroundColor={\n                  answerColorMap[isCorrect?.toString() as string]\n                }\n                disabled={userAnswer}\n                value={answer}\n                onClick={callback}\n              >\n                {decodeSpecialChars(answer)}\n              </Button>\n              {userAnswer && currentQuestion.correct_answer === answer && (\n                <CircleWithTick />\n              )}\n            </Box>\n          </div>\n        ))}\n      </Flex>\n    </Box>\n  );\n};\n\nexport default QuestionCard;\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\n\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      defaultChecked\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/quiz.7db7837e.png\";","const apiCategories = [\n    {\n        categoryName: 'General Knowledge',\n        categoryNumber: '9'\n    },\n    {\n        categoryName: 'Books',\n        categoryNumber: '10'\n    },\n    {\n        categoryName: 'Film',\n        categoryNumber: '11'\n    },\n    {\n        categoryName: 'Music',\n        categoryNumber: '12'\n    },\n    {\n        categoryName: 'Computer Science',\n        categoryNumber: '18'\n    }\n];\n\nexport default apiCategories;","import {\n  Center,\n  RadioGroup,\n  Stack,\n  Radio,\n  Select,\n  Text,\n} from \"@chakra-ui/react\";\nimport { ChangeEvent } from \"react\";\nimport apiCategories from \"../../constants/apiCategories\";\nimport Container from \"../style/container\";\ntype Props = {\n  setDifficulty: (e: string) => void;\n  handleDropdownChange: (e: ChangeEvent<HTMLSelectElement>) => void;\n};\n\nconst OptionsCard: React.FC<Props> = ({\n  setDifficulty,\n  handleDropdownChange,\n}) => {\n  let categoryList = apiCategories.map((category, i) => {\n    return (\n      <option key={i} value={category.categoryNumber}>\n        {category.categoryName}\n      </option>\n    );\n  });\n\n  return (\n    <>\n      <Container>\n        <Text color={\"black\"} fontSize={[\"sm\", \"md\", \"lg\", \"xl\"]}>\n          <Center mb={\"20px\"}>\n            Difficulty\n            <RadioGroup\n              fontSize={[\"sm\", \"md\", \"lg\", \"xl\"]}\n              onChange={(event) => setDifficulty(event)}\n            >\n              <Stack ml={\"15px\"} direction=\"row\">\n                <Radio value={\"easy\"}>Easy</Radio>\n                <Radio value=\"medium\">Medium</Radio>\n                <Radio value=\"hard\">Hard</Radio>\n              </Stack>\n            </RadioGroup>\n          </Center>\n          <Center>\n            Category\n            <Select\n              width={\"200px\"}\n              onChange={handleDropdownChange}\n              ml={\"25px\"}\n              fontSize={[\"sm\", \"md\", \"lg\"]}\n              placeholder=\"Select option\"\n            >\n              {categoryList}\n            </Select>\n          </Center>\n        </Text>\n      </Container>\n    </>\n  );\n};\n\nexport default OptionsCard;\n","import { shuffleArray } from \"../components/utility/shuffleArray\";\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\nexport type QuestionState = Question & { answers: string[] };\n\nexport const fetchQuestions = async (\n  amount: number,\n  difficulty: string,\n  category: string\n) => {\n  const APIendpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(APIendpoint)).json();\n\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export const shuffleArray = (array: any[]) =>\n\n    [...array].sort(() => Math.random() - 0.5);\n","import { fetchQuestions, QuestionState } from \"utils/API\";\nimport { AnswerObject } from \"types/types\";\n\ntype StartTriviaProps = {\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setGameOver: React.Dispatch<React.SetStateAction<boolean>>;\n  setQuestions: React.Dispatch<React.SetStateAction<QuestionState[]>>;\n  setScore: React.Dispatch<React.SetStateAction<number>>;\n  setUserAnswers: React.Dispatch<React.SetStateAction<AnswerObject[]>>;\n  setNumber: React.Dispatch<React.SetStateAction<number>>;\n  TOTAL_QUESTIONS: number;\n  difficulty: string;\n  category: string;\n};\n\ntype CheckAnswerProps = {\n  e: React.MouseEvent<HTMLButtonElement>;\n  questions: QuestionState[];\n  number: number;\n  gameOver: boolean;\n  setScore: React.Dispatch<React.SetStateAction<number>>;\n  setIsCorrect: React.Dispatch<React.SetStateAction<boolean | null>>;\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\n  setUserAnswers: React.Dispatch<React.SetStateAction<AnswerObject[]>>;\n  setShowNext: React.Dispatch<React.SetStateAction<boolean>>;\n  userAnswers: AnswerObject[];\n  score: number;\n  TOTAL_QUESTIONS: number;\n};\n\nconst startTrivia =\n  ({\n    setLoading,\n    setGameOver,\n    setQuestions,\n    setScore,\n    setUserAnswers,\n    setNumber,\n    TOTAL_QUESTIONS,\n    difficulty,\n    category,\n  }: StartTriviaProps) =>\n  async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTIONS,\n      difficulty,\n      category\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\nconst checkAnswer = ({\n  e,\n  questions,\n  number,\n  gameOver,\n  setScore,\n  setIsCorrect,\n  setMessage,\n  setUserAnswers,\n  setShowNext,\n  userAnswers,\n  score,\n  TOTAL_QUESTIONS,\n}: CheckAnswerProps) => {\n  if (!gameOver) {\n    const answer = e.currentTarget.value;\n    const correct = questions[number].correct_answer === answer;\n    setShowNext(true);\n    if (correct) {\n      setScore((prev) => prev + 1);\n      setIsCorrect(true);\n      setMessage(\"Good Job!\");\n    } else {\n      setIsCorrect(false);\n      setMessage(`The correct answer is \"${questions[number].correct_answer}\"`);\n    }\n    if (userAnswers.length === TOTAL_QUESTIONS - 1) {\n      setMessage(`You scored ${score} out of ${TOTAL_QUESTIONS}, good job!`);\n    }\n\n    const answerObject = {\n      question: questions[number].question,\n      answer,\n      correct,\n      correctAnswer: questions[number].correct_answer,\n    };\n    setUserAnswers((prev) => [...prev, answerObject]);\n  }\n};\n\nexport { startTrivia, checkAnswer };\n","import { SwitchTransition, CSSTransition } from \"react-transition-group\";\nimport \"../../../app.css\";\n\ninterface TransitionWrapperProps {\n  children: JSX.Element;\n  nodeRef: React.RefObject<HTMLDivElement>;\n  refKey: number;\n  mode?: \"out-in\" | \"in-out\";\n}\n\nexport default function SwitchTransitionWrapper({\n  children,\n  nodeRef,\n  refKey,\n  mode,\n}: TransitionWrapperProps): JSX.Element {\n  return (\n    <SwitchTransition mode={mode || \"out-in\"}>\n      <CSSTransition<HTMLElement>\n        key={refKey}\n        nodeRef={nodeRef}\n        classNames=\"fade\"\n        addEndListener={(done: () => void): any => {\n          nodeRef?.current?.addEventListener(\"transitionend\", done, false);\n        }}\n      >\n        <div style={{ marginTop: \"64px\" }} ref={nodeRef}>\n          {children}\n        </div>\n      </CSSTransition>\n    </SwitchTransition>\n  );\n}\n","import React, { ChangeEvent } from \"react\";\nimport { useState } from \"react\";\nimport QuestionCard from \"./components/questionCard\";\nimport { QuestionState } from \"./utils/API\";\nimport {\n  Box,\n  Grid,\n  Button,\n  Center,\n  Image,\n  Badge,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./components/colorModeSwitcher\";\nimport logo from \"./images/quiz.png\";\nimport OptionsCard from \"./components/optionsCard\";\nimport \"./app.css\";\nimport { startTrivia, checkAnswer } from \"./utils/helpers\";\nimport SwitchTransitionWrapper from \"./components/style/transitions/SwitchTransition\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [score, setScore] = useState(0);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [gameOver, setGameOver] = useState(true);\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\n  const [difficulty, setDifficulty] = useState<string>(\"\");\n  const [category, setCategory] = useState<string>(\"\");\n  const [message, setMessage] = useState<string>(\"\");\n  const [showNext, setShowNext] = useState<boolean>(false);\n  const nodeRef = React.useRef<HTMLDivElement>(null);\n  const buttonRef = React.useRef<HTMLDivElement>(null);\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTIONS) {\n      setMessage(`You scored ${score} out of 10, good job!`);\n    } else {\n      setIsCorrect(null);\n      setNumber(nextQ);\n      setMessage(\"\");\n    }\n    setShowNext(false);\n  };\n\n  const handleDropdownChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setCategory(e.target.value);\n  };\n\n  const retry = () => {\n    setGameOver(true);\n    setMessage(\"\");\n  };\n\n  return (\n    <>\n      <Box textAlign=\"center\" fontSize=\"l\">\n        <Grid dir=\"column\" minH=\"100vh\">\n          <Image top={0} position={\"fixed\"} boxSize={[\"l\"]} src={logo} />\n          <div style={{ minHeight: \"100%\" }} className=\"App\">\n            <ColorModeSwitcher\n              top=\"24px\"\n              right=\"16px\"\n              sx={{ position: \"absolute\" }}\n            />\n            {gameOver && (\n              <Box\n                sx={{\n                  minHeight: \"100%\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  paddingBottom: \"120px\",\n                }}\n              >\n                <>\n                  <OptionsCard\n                    handleDropdownChange={handleDropdownChange}\n                    setDifficulty={setDifficulty}\n                  />\n                  <Button\n                    m={\"30px\"}\n                    maxWidth={\"200px\"}\n                    colorScheme=\"blue\"\n                    className=\"start\"\n                    onClick={startTrivia({\n                      setLoading,\n                      setQuestions,\n                      setGameOver,\n                      setNumber,\n                      setScore,\n                      setUserAnswers,\n                      difficulty,\n                      category,\n                      TOTAL_QUESTIONS,\n                    })}\n                  >\n                    Start\n                  </Button>\n                </>\n              </Box>\n            )}\n            <Flex flexDir={\"column\"} marginBottom={\"20px\"}>\n              {loading && <p>Loading Questions...</p>}\n              {!loading && !gameOver ? (\n                <SwitchTransitionWrapper nodeRef={nodeRef} refKey={number + 1}>\n                  <QuestionCard\n                    questionNumber={number + 1}\n                    totalQuestions={TOTAL_QUESTIONS}\n                    question={questions[number].question}\n                    answer={questions[number].answers}\n                    userAnswer={userAnswers ? userAnswers[number] : undefined}\n                    currentQuestion={questions[number]}\n                    callback={(e) =>\n                      checkAnswer({\n                        e,\n                        userAnswers,\n                        setUserAnswers,\n                        questions,\n                        number,\n                        setScore,\n                        setIsCorrect,\n                        score,\n                        TOTAL_QUESTIONS,\n                        gameOver,\n                        setMessage,\n                        setShowNext,\n                      })\n                    }\n                    isCorrect={isCorrect}\n                    score={score}\n                  />\n                </SwitchTransitionWrapper>\n              ) : null}\n\n              {!gameOver &&\n              !loading &&\n              userAnswers.length === number + 1 &&\n              number !== TOTAL_QUESTIONS - 1 ? (\n                <CSSTransition\n                  in={showNext}\n                  out={showNext}\n                  key={number + 1}\n                  nodeRef={buttonRef}\n                  timeout={5000}\n                  classNames=\"fade\"\n                >\n                  <Center key={number + 1} ref={buttonRef}>\n                    <Button\n                      backgroundColor={\"#1391ad\"}\n                      width={\"200px\"}\n                      onClick={nextQuestion}\n                      className=\"fade\"\n                      mt={\"32px\"}\n                    >\n                      Next Question\n                    </Button>\n                  </Center>\n                </CSSTransition>\n              ) : null}\n              <Center>\n                <Badge\n                  borderRadius={\"5px\"}\n                  fontSize={\"m\"}\n                  m=\"20px\"\n                  sx={{ backgroundColor: \"transparent\" }}\n                  width={\"auto\"}\n                >\n                  {message}\n                </Badge>\n              </Center>\n              {userAnswers.length === TOTAL_QUESTIONS && !gameOver ? (\n                <Center>\n                  <Button\n                    backgroundColor={\"#1391ad\"}\n                    width={\"200px\"}\n                    onClick={retry}\n                  >\n                    Retry\n                  </Button>\n                </Center>\n              ) : null}\n            </Flex>\n          </div>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./app.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport \"@fontsource/raleway/400.css\";\nimport \"@fontsource/open-sans/700.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}