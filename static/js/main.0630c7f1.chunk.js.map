{"version":3,"sources":["API.ts","components/utility/shuffleArray.ts","components/QuestionCard.tsx","ColorModeSwitcher.tsx","images/quiz.png","constants/apiCategories.js","components/OptionsCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchQuestions","amount","difficulty","category","a","APIendpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","answer","callback","userAnswer","questionNumber","totalQuestions","isCorrect","i","m","width","fontSize","colorScheme","disabled","value","onClick","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","icon","apiCategories","categoryName","categoryNumber","OptionsCard","setDifficulty","handleDropdownChange","categoryList","mb","onChange","event","ml","direction","placeholder","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","score","setScore","number","setNumber","userAnswers","setUserAnswers","gameOver","setGameOver","setIsCorrect","setCategory","startTrivia","newQuestions","theme","textAlign","dir","minH","justifySelf","src","logo","className","length","e","target","marginBottom","undefined","currentTarget","correct","prev","answerObject","correctAnswer","nextQ","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0630c7f1.chunk.js","sourcesContent":["import { shuffleArray } from \"./components/utility/shuffleArray\";\nexport type Question = {\n\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\nexport type QuestionState = Question & { answers: string[] };\n\n\nexport const fetchQuestions = async (amount: number, difficulty: string, category: string) => {\n\n    const APIendpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(APIendpoint)).json();\n\n    console.log(data)\n\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers,\n            question.correct_answer])\n        }\n    ))\n};\n","export const shuffleArray = (array: any[]) =>\n\n    [...array].sort(() => Math.random() - 0.5);\n","import { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {\n  question: string;\n  answer: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: any;\n  questionNumber: number;\n  totalQuestions: number;\n  isCorrect: string;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answer,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n  isCorrect,\n}) => {\n  return (\n    <div>\n      Question: {questionNumber} / {totalQuestions}\n      <div>\n        {question}\n      </div>\n      <div>\n        {answer.map((answer, i) => (\n          <Button\n            key={i}\n            m={'10px'}\n            width={['sm', 'md', 'lg', 'xl']}\n            fontSize={['sm', 'md', 'lg', 'xl']}\n            colorScheme={isCorrect}\n            disabled={userAnswer}\n            value={answer}\n            onClick={callback}\n          >\n            {answer}\n          </Button>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionCard;\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\n\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/quiz.e03f2b79.png\";","const apiCategories = [\n    {\n        categoryName: 'General Knowledge',\n        categoryNumber: '9'\n    },\n    {\n        categoryName: 'Books',\n        categoryNumber: '10'\n    },\n    {\n        categoryName: 'Film',\n        categoryNumber: '11'\n    },\n    {\n        categoryName: 'Music',\n        categoryNumber: '12'\n    },\n    {\n        categoryName: 'Computer Science',\n        categoryNumber: '18'\n    }\n];\n\nexport default apiCategories;","import { Center, RadioGroup, Stack, Radio, Select } from \"@chakra-ui/react\"\nimport { ChangeEvent } from \"react\";\nimport apiCategories from '../constants/apiCategories'\n\n\ntype Props = {\n    setDifficulty: (e: string) => void\n    handleDropdownChange: (e: ChangeEvent<HTMLSelectElement>) => void\n}\n\nconst OptionsCard: React.FC<Props> = ({ setDifficulty, handleDropdownChange }) => {\n    let categoryList = apiCategories.map((category, i) => {\n        return (\n            <option\n                key={i}\n                value={category.categoryNumber}\n            >\n                {category.categoryName}\n            </option>\n        )\n    });\n\n    return (\n        <>\n            <Center mb={'20px'}>\n                Difficulty\n                <RadioGroup onChange={event => setDifficulty(event)}>\n                    <Stack ml={'15px'} direction='row'>\n                        <Radio value={'easy'}>Easy</Radio>\n                        <Radio value='medium'>Medium</Radio>\n                        <Radio value='hard'>Hard</Radio>\n                    </Stack>\n                </RadioGroup>\n            </Center>\n            <Center>\n                Category\n                <Select\n                    width={'200px'}\n                    onChange={handleDropdownChange}\n                    ml={'25px'}\n                    placeholder='Select option'>\n                    {categoryList}\n                </Select>\n            </Center>\n        </>\n    )\n}\n\n\n\nexport default OptionsCard;","import React, { ChangeEvent } from \"react\";\nimport { useState } from \"react\";\nimport { fetchQuestions } from \"./API\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { QuestionState } from \"./API\";\nimport {\n  ChakraProvider,\n  theme,\n  Box,\n  Grid,\n  Button,\n  Center,\n  Image\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport logo from './images/quiz.png'\nimport OptionsCard from \"./components/OptionsCard\";\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [score, setScore] = useState(0);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [gameOver, setGameOver] = useState(true);\n  const [isCorrect, setIsCorrect] = useState<string>(\"blue\");\n  const [difficulty, setDifficulty] = useState<string>('')\n  const [category, setCategory] = useState<string>('')\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, difficulty, category);\n\n    console.log(await fetchQuestions(TOTAL_QUESTIONS, difficulty, category))\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore((prev) => prev + 1);\n        setIsCorrect(\"green\");\n      } else {\n        setIsCorrect(\"red\");\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setIsCorrect(\"blue\");\n      setNumber(nextQ);\n    }\n  };\n\n  const handleDropdownChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setCategory(e.target.value)\n  }\n\n  return (\n    <>\n      <ChakraProvider theme={theme}>\n        <Box textAlign=\"center\" fontSize=\"xl\">\n          <Grid dir=\"column\" minH=\"100vh\">\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n            <Center>\n              <Image src={logo} />\n            </Center>\n            <div className=\"App\">\n              {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                <>\n                  <OptionsCard\n                    handleDropdownChange={handleDropdownChange}\n                    setDifficulty={setDifficulty}\n                  />\n                  <Button\n                    m={'30px'}\n                    colorScheme=\"blue\"\n                    className=\"start\"\n                    onClick={startTrivia}\n                  >\n                    Start\n                  </Button>\n                </>\n              ) : null}\n              <Box marginBottom={'200px'}>\n                {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\n                {loading && <p>Loading Questions...</p>}\n                {!loading && !gameOver ? (\n                  <QuestionCard\n                    questionNumber={number + 1}\n                    totalQuestions={TOTAL_QUESTIONS}\n                    question={questions[number].question}\n                    answer={questions[number].answers}\n                    userAnswer={userAnswers ? userAnswers[number] : undefined}\n                    callback={checkAnswer}\n                    isCorrect={isCorrect}\n                  />\n                ) : null}\n                {!gameOver && !loading &&\n                  userAnswers.length === number + 1 &&\n                  number !== TOTAL_QUESTIONS - 1 ? (\n                  <button className=\"next\" onClick={nextQuestion}>\n                    Next Question\n                  </button>\n                ) : null}\n              </Box>\n            </div>\n\n          </Grid>\n        </Box>\n      </ChakraProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./app.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}