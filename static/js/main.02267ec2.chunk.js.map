{"version":3,"sources":["API.ts","components/utility/shuffleArray.ts","components/utility/decodeSpecialChars.ts","components/style/container.js","components/QuestionCard.tsx","ColorModeSwitcher.tsx","images/quiz.png","constants/apiCategories.js","components/OptionsCard.tsx","App.tsx","reportWebVitals.ts","theme.js","index.tsx"],"names":["fetchQuestions","amount","difficulty","category","a","APIendpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","decodeSpecialChars","string","hash","regex","RegExp","Object","keys","join","replace","matched","Container","props","marginTop","direction","alignItems","width","padding","boxShadow","backgroundColor","QuestionCard","answer","callback","userAnswer","questionNumber","totalQuestions","isCorrect","score","color","fontSize","mt","justifyContent","alignContent","i","m","colorScheme","disabled","value","onClick","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","defaultChecked","variant","icon","apiCategories","categoryName","categoryNumber","OptionsCard","setDifficulty","handleDropdownChange","categoryList","mb","onChange","event","ml","placeholder","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","setScore","number","setNumber","userAnswers","setUserAnswers","gameOver","setGameOver","setIsCorrect","setCategory","message","setMessage","startTrivia","newQuestions","textAlign","dir","minH","justifySelf","position","boxSize","src","logo","className","e","target","flexDir","marginBottom","undefined","currentTarget","correct","prev","length","console","log","answerObject","correctAnswer","nextQ","borderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fonts","heading","body","breakpoints","createBreakpoints","sm","md","lg","xl","theme","extendTheme","colors","black","textStyles","h1","lineHeight","letterSpacing","h2","icons","path","height","viewBox","fill","xmlns","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02267ec2.chunk.js","sourcesContent":["import { shuffleArray } from \"./components/utility/shuffleArray\";\nexport type Question = {\n\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\nexport type QuestionState = Question & { answers: string[] };\n\n\nexport const fetchQuestions = async (amount: number, difficulty: string, category: string) => {\n\n    const APIendpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(APIendpoint)).json();\n\n\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers,\n            question.correct_answer])\n        }\n    ))\n};\n","export const shuffleArray = (array: any[]) =>\n\n    [...array].sort(() => Math.random() - 0.5);\n","export const decodeSpecialChars = (string: string) => {\n    const hash: { [key: string]: string } = {\n        '&quot;': '\"',\n        '&#039;': \"'\",\n        '&lt;': '<',\n        '&gt;': '>',\n        '&amp;': '&',\n    }\n    var regex = new RegExp(Object.keys(hash).join('|'), 'gi');\n    let decodedStr = string.replace(regex, function (matched) {\n        return hash[matched];\n    });\n    return decodedStr;\n};\n\n","\nimport { Center, Flex } from '@chakra-ui/react'\n\nconst Container = (props) => {\n    return (\n        <Center>\n            <Flex\n                marginTop={'90px'}\n                direction=\"column\"\n                alignItems=\"center\"\n                width={['sm', 'md', 'lg', 'xl']}\n                padding={'30px'}\n                boxShadow={'rgba(240, 46, 170, 0.4) -5px 5px, rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px, rgba(240, 46, 170, 0.1) -20px 20px, rgba(240, 46, 170, 0.05) -25px 25px;'}\n                backgroundColor={'#1fa6c4'}\n                {...props}>\n            </Flex>\n        </Center>\n\n    )\n};\n\nexport default Container;","import { Button, Flex, Heading, Text, Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { decodeSpecialChars } from './utility/decodeSpecialChars';\nimport Container from '../components/style/container';\n\n\ntype Props = {\n  question: string;\n  answer: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: any;\n  questionNumber: number;\n  totalQuestions: number;\n  isCorrect: string;\n  score: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answer,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n  isCorrect,\n  score,\n}) => {\n  return (\n    <Box >\n      <Container padding='5' >\n        <Text color={'black'} fontSize={['sm', 'md', 'lg']} >\n          Score : {score}\n          <div></div>\n          Question : {questionNumber} / {totalQuestions}\n        </Text>\n        <Heading>\n          <hr></hr>\n          <Text fontSize={'m'}>\n            {decodeSpecialChars(question)}\n          </Text>\n        </Heading>\n      </Container>\n      <Flex mt={'100px'} direction={'column'} justifyContent='center' alignContent={'center'}>\n        {answer.map((answer, i) => (\n          <div key={i}>\n            <Button\n              key={i}\n              m={'10px'}\n              width={['sm', 'md', 'lg']}\n              fontSize={['sm', 'md', 'lg']}\n              colorScheme={isCorrect}\n              disabled={userAnswer}\n              value={answer}\n              onClick={callback}\n            >\n              {decodeSpecialChars(answer)}\n            </Button>\n          </div>\n        ))}\n      </Flex>\n    </Box>\n  );\n};\n\nexport default QuestionCard;\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\n\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      defaultChecked\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/quiz.7db7837e.png\";","const apiCategories = [\n    {\n        categoryName: 'General Knowledge',\n        categoryNumber: '9'\n    },\n    {\n        categoryName: 'Books',\n        categoryNumber: '10'\n    },\n    {\n        categoryName: 'Film',\n        categoryNumber: '11'\n    },\n    {\n        categoryName: 'Music',\n        categoryNumber: '12'\n    },\n    {\n        categoryName: 'Computer Science',\n        categoryNumber: '18'\n    }\n];\n\nexport default apiCategories;","import { Center, RadioGroup, Stack, Radio, Select, Flex, Text } from \"@chakra-ui/react\"\nimport { ChangeEvent } from \"react\";\nimport apiCategories from '../constants/apiCategories'\nimport Container from '../components/style/container'\n\n\ntype Props = {\n    setDifficulty: (e: string) => void\n    handleDropdownChange: (e: ChangeEvent<HTMLSelectElement>) => void\n}\n\nconst OptionsCard: React.FC<Props> = ({ setDifficulty, handleDropdownChange }) => {\n    let categoryList = apiCategories.map((category, i) => {\n        return (\n\n            <option\n                key={i}\n                value={category.categoryNumber}\n            >\n                {category.categoryName}\n            </option>\n\n        )\n    });\n\n    return (\n        <>\n            <Container>\n                <Text color={'black'} fontSize={['sm', 'md', 'lg', 'xl']}>\n                    <Center mb={'20px'}>\n                        Difficulty\n                        <RadioGroup fontSize={['sm', 'md', 'lg', 'xl']} onChange={event => setDifficulty(event)}>\n                            <Stack ml={'15px'} direction='row'>\n                                <Radio value={'easy'}>Easy</Radio>\n                                <Radio value='medium'>Medium</Radio>\n                                <Radio value='hard'>Hard</Radio>\n                            </Stack>\n                        </RadioGroup>\n                    </Center>\n                    <Center>\n                        Category\n                        <Select\n                            width={'200px'}\n                            onChange={handleDropdownChange}\n                            ml={'25px'}\n                            fontSize={['sm', 'md', 'lg']}\n                            placeholder='Select option'>\n                            {categoryList}\n                        </Select>\n                    </Center>\n                </Text>\n            </Container>\n        </>\n    )\n}\n\n\n\nexport default OptionsCard;","import React, { ChangeEvent } from \"react\";\nimport { useState } from \"react\";\nimport { fetchQuestions } from \"./API\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { QuestionState } from \"./API\";\nimport {\n  Box,\n  Grid,\n  Button,\n  Center,\n  Image,\n  Badge,\n  Flex\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport logo from './images/quiz.png'\nimport OptionsCard from \"./components/OptionsCard\";\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [score, setScore] = useState(0);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [gameOver, setGameOver] = useState(true);\n  const [isCorrect, setIsCorrect] = useState<string>(\"blue\");\n  const [difficulty, setDifficulty] = useState<string>('')\n  const [category, setCategory] = useState<string>('')\n  const [message, setMessage] = useState<string>('')\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, difficulty, category);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore((prev) => prev + 1);\n        setIsCorrect(\"green\");\n        setMessage('Good Job!')\n      } else {\n        setIsCorrect(\"red\");\n        setMessage(`sorry! the correct answer is \"${questions[number].correct_answer}\"`)\n      }\n      if (userAnswers.length === TOTAL_QUESTIONS - 1) {\n        console.log('hello')\n        setMessage(`You scored ${score} out of 10, good job!`)\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTIONS) {\n      console.log('hello')\n      setMessage(`You scored ${score} out of 10, good job!`)\n    } else {\n      setIsCorrect(\"blue\");\n      setNumber(nextQ);\n      setMessage('')\n    }\n  };\n\n  const handleDropdownChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setCategory(e.target.value)\n  };\n\n  const retry = () => {\n    setGameOver(true)\n    setMessage('')\n  }\n\n  return (\n    <>\n      <Box textAlign=\"center\" fontSize=\"l\">\n        <Grid dir=\"column\" minH=\"100vh\">\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n\n          <Image position={'fixed'} boxSize={['l']} src={logo} />\n\n          <div className=\"App\">\n            {gameOver ? (\n              <>\n                <OptionsCard\n                  handleDropdownChange={handleDropdownChange}\n                  setDifficulty={setDifficulty}\n                />\n                <Button\n                  m={'30px'}\n                  colorScheme=\"blue\"\n                  className=\"start\"\n                  onClick={startTrivia}\n                >\n                  Start\n                </Button>\n              </>\n            ) : null}\n            <Flex flexDir={'column'} marginBottom={'20px'}>\n              {loading && <p>Loading Questions...</p>}\n              {!loading && !gameOver ? (\n                <QuestionCard\n                  questionNumber={number + 1}\n                  totalQuestions={TOTAL_QUESTIONS}\n                  question={questions[number].question}\n                  answer={questions[number].answers}\n                  userAnswer={userAnswers ? userAnswers[number] : undefined}\n                  callback={checkAnswer}\n                  isCorrect={isCorrect}\n                  score={score}\n                />\n              ) : null}\n\n              {!gameOver && !loading &&\n                userAnswers.length === number + 1 &&\n                number !== TOTAL_QUESTIONS - 1 ? (\n                <Center mt='15px'>\n                  <Button backgroundColor={'#1391ad'} width={'200px'} className=\"next\" onClick={nextQuestion}>\n                    Next Question\n                  </Button>\n                </Center>\n\n              ) : null}\n              <Center>\n                <Badge borderRadius={'5px'} fontSize={'m'} m='20px' width={'auto'}>\n                  {message}\n                </Badge>\n              </Center>\n              {userAnswers.length === TOTAL_QUESTIONS && !gameOver ? (\n                <Center>\n                  <Button backgroundColor={'#1391ad'} width={'200px'} className=\"next\" onClick={retry}>\n                    Retry\n                  </Button>\n                </Center>\n              ) : (\n                null\n              )}\n            </Flex>\n          </div>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from '@chakra-ui/react'\nimport { createBreakpoints } from '@chakra-ui/theme-tools'\n\nconst fonts = {\n    heading: 'Raleway',\n    body: 'Raleway',\n}\n\nconst breakpoints = createBreakpoints({\n    sm: '45em',\n    md: '55em',\n    lg: '65em',\n    xl: '75em',\n})\n\nconst theme = extendTheme({\n    colors: {\n        black: '#16161D',\n    },\n    fonts,\n    breakpoints,\n    textStyles: {\n        h1: {\n            fontSize: '35px',\n            lineHeight: '110%',\n            letterSpacing: '-2%',\n            fonts: fonts\n\n        },\n        h2: {\n            fontSize: '35px',\n            lineHeight: '110%',\n            letterSpacing: '-2%',\n\n        },\n    },\n    icons: {\n        logo: {\n            path: (\n                <svg\n                    width=\"3000\"\n                    height=\"3163\"\n                    viewBox=\"0 0 3000 3163\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <rect width=\"3000\" height=\"3162.95\" fill=\"none\" />\n                    <path\n                        d=\"M1470.89 1448.81L2170 2488.19H820V706.392H2170L1470.89 1448.81ZM1408.21 1515.37L909.196 2045.3V2393.46H1998.84L1408.21 1515.37Z\"\n                        fill=\"currentColor\"\n                    />\n                </svg>\n            ),\n            viewBox: '0 0 3000 3163',\n        },\n    },\n})\n\nexport default theme\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./app.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from './theme'\nimport '@fontsource/raleway/400.css'\nimport '@fontsource/open-sans/700.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}