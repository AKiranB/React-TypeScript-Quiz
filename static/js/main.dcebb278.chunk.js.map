{"version":3,"sources":["API.ts","components/utils.ts","components/QuestionCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuestions","amount","difficulty","a","APIendpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","answer","callback","userAnswer","questionNumber","totalQuestions","dangerouslySetInnerHTML","__html","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","className","length","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQ","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcebb278.chunk.js","sourcesContent":["import { shuffleArray } from \"./components/utils\";\nexport type Question = {\n\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\n\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard',\n}\n\n\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\n\n    const APIendpoint = `https://opentdb.com/api.php?amount=${amount}&category=9&difficulty=${difficulty}&type=multiple`;\n\n    const data = await (await fetch(APIendpoint)).json();\n\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers,\n            question.correct_answer])\n        }\n    ))\n\n\n}","export const shuffleArray = (array: any[]) =>\n\n    [...array].sort(() => Math.random() - 0.5);\n","import React from 'react'\nimport AnswerObject from '../App'\n\n\ntype Props = {\n    question: string;\n    answer: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: any;\n    questionNumber: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answer,\n    callback,\n    userAnswer,\n    questionNumber,\n    totalQuestions\n}) => {\n\n    return (<div>\n        Question: {questionNumber} / {totalQuestions}\n        <p dangerouslySetInnerHTML={{ __html: question }}></p>\n        <div>\n            {answer.map(answer => (\n                <div>\n                    <button disabled={userAnswer} value={answer} onClick={callback}>{answer}</button>\n                    <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n                </div>\n            ))}\n        </div>\n    </div>)\n}\n\n\nexport default QuestionCard\n","import React from 'react';\nimport { useState } from 'react';\nimport { fetchQuestions } from './API';\n\n//componenets\nimport QuestionCard from './components/QuestionCard';\n\n//types \nimport { QuestionState, Difficulty } from './API';\n\n\ntype AnswerObject = {\n  question: string,\n  answer: string,\n  correct: boolean,\n  correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n\n  const startTrivia = async () => {\n\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    console.log(newQuestions)\n\n    setQuestions(newQuestions)\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0)\n    setLoading(false);\n  }\n\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value\n      const correct = questions[number].correct_answer === answer\n      if (correct) setScore(prev => prev + 1)\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n\n  }\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className='start' onClick={startTrivia}>\n          Start\n        </button>\n      ) : null}\n      {!gameOver ? <p className='score'>Score:{score}</p> : null}\n      {loading && <p>Loading Questions...</p>}\n      {!loading && !gameOver ? <QuestionCard\n        questionNumber={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answer={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      /> : null}\n      {\n\n        !gameOver && !loading &&\n          userAnswers.length === number + 1\n          && number !== TOTAL_QUESTIONS - 1 ?\n\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button> : null\n\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './app.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}