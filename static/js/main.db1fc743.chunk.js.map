{"version":3,"sources":["API.ts","components/utils.ts","components/QuestionCard.tsx","ColorModeSwitcher.tsx","images/quiz.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchQuestions","amount","difficulty","category","a","APIendpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","answer","callback","userAnswer","questionNumber","totalQuestions","isCorrect","m","width","fontSize","colorScheme","disabled","value","onClick","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","icon","App","useState","loading","setLoading","questions","setQuestions","score","setScore","number","setNumber","userAnswers","setUserAnswers","gameOver","setGameOver","setIsCorrect","setDifficulty","setCategory","startTrivia","newQuestions","theme","textAlign","dir","minH","justifySelf","src","logo","className","length","onChange","event","direction","marginBottom","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQ","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db1fc743.chunk.js","sourcesContent":["import { shuffleArray } from \"./components/utils\";\nexport type Question = {\n\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\nexport type QuestionState = Question & { answers: string[] };\n\n\nexport const fetchQuestions = async (amount: number, difficulty: string, category: string) => {\n\n    const APIendpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(APIendpoint)).json();\n\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers,\n            question.correct_answer])\n        }\n    ))\n};\n","export const shuffleArray = (array: any[]) =>\n\n    [...array].sort(() => Math.random() - 0.5);\n","import { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AnswerObject from \"../App\";\n\ntype Props = {\n  question: string;\n  answer: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: any;\n  questionNumber: number;\n  totalQuestions: number;\n  isCorrect: string;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answer,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n  isCorrect,\n}) => {\n  return (\n    <div>\n      Question: {questionNumber} / {totalQuestions}\n      <div>\n        {question}\n      </div>\n      <div>\n        {answer.map((answer) => (\n          <div>\n            <Button\n              m={'10px'}\n              width={['sm', 'md', 'lg', 'xl']}\n              fontSize={['sm', 'md', 'lg', 'xl']}\n              colorScheme={isCorrect}\n              disabled={userAnswer}\n              value={answer}\n              onClick={callback}\n            >\n              {answer}\n            </Button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionCard;\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\n\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/quiz.e03f2b79.png\";","import React from \"react\";\nimport { useState } from \"react\";\nimport { fetchQuestions } from \"./API\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { QuestionState } from \"./API\";\nimport {\n  ChakraProvider,\n  theme,\n  Box,\n  Grid,\n  Button,\n  Radio,\n  RadioGroup,\n  Stack,\n  Center,\n  Image,\n  Flex\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport logo from './images/quiz.png'\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [score, setScore] = useState(0);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [gameOver, setGameOver] = useState(true);\n  const [isCorrect, setIsCorrect] = useState<string>(\"blue\");\n  const [difficulty, setDifficulty] = useState<string>('')\n  const [category, setCategory] = useState<string>('')\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, difficulty, category);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore((prev) => prev + 1);\n        setIsCorrect(\"green\");\n      } else {\n        setIsCorrect(\"red\");\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setIsCorrect(\"blue\");\n      setNumber(nextQ);\n    }\n  };\n\n  return (\n    <>\n      <ChakraProvider theme={theme}>\n        <Box textAlign=\"center\" fontSize=\"xl\">\n          <Grid dir=\"column\" minH=\"100vh\">\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n            <Center>\n              <Image src={logo} />\n            </Center>\n            <div className=\"App\">\n              {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                <>\n                  <Center>\n                    Select Difficulty\n                    <RadioGroup onChange={event => setDifficulty(event)}>\n                      <Stack direction='row'>\n                        <Radio value='easy'>Easy</Radio>\n                        <Radio value='medium'>Medium</Radio>\n                        <Radio value='hard'>Hard</Radio>\n                      </Stack>\n                    </RadioGroup>\n                  </Center>\n                  <Center>\n                    Please Choose the category\n                    <RadioGroup onChange={event => setCategory(event as any)}>\n                      <Stack direction='row'>\n                        <Radio value={'9'}>General Knowledge</Radio>\n                        <Radio value={'10'}>Books</Radio>\n                        <Radio value={'11'}>Film</Radio>\n                      </Stack>\n                    </RadioGroup>\n                  </Center>\n\n                  <Button\n                    colorScheme=\"blue\"\n                    className=\"start\"\n                    onClick={startTrivia}\n                  >\n                    Start\n                  </Button>\n                </>\n              ) : null}\n              <Box marginBottom={'200px'}>\n                {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\n                {loading && <p>Loading Questions...</p>}\n                {!loading && !gameOver ? (\n                  <QuestionCard\n                    questionNumber={number + 1}\n                    totalQuestions={TOTAL_QUESTIONS}\n                    question={questions[number].question}\n                    answer={questions[number].answers}\n                    userAnswer={userAnswers ? userAnswers[number] : undefined}\n                    callback={checkAnswer}\n                    isCorrect={isCorrect}\n                  />\n                ) : null}\n                {!gameOver && !loading &&\n                  userAnswers.length === number + 1 &&\n                  number !== TOTAL_QUESTIONS - 1 ? (\n                  <button className=\"next\" onClick={nextQuestion}>\n                    Next Question\n                  </button>\n                ) : null}\n              </Box>\n            </div>\n\n          </Grid>\n        </Box>\n      </ChakraProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./app.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}