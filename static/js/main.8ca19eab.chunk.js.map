{"version":3,"sources":["API.ts","components/utility/shuffleArray.ts","components/utility/decodeSpecialChars.ts","components/style/container.js","components/QuestionCard.tsx","ColorModeSwitcher.tsx","images/quiz.png","constants/apiCategories.js","components/OptionsCard.tsx","App.tsx","reportWebVitals.ts","theme.js","index.tsx"],"names":["fetchQuestions","amount","difficulty","category","a","APIendpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","decodeSpecialChars","string","hash","re","RegExp","Object","keys","join","replace","matched","Container","props","marginTop","direction","alignItems","border","width","padding","boxShadow","backgroundColor","QuestionCard","answer","callback","userAnswer","questionNumber","totalQuestions","isCorrect","score","fontSize","mt","justifyContent","alignContent","i","m","colorScheme","disabled","value","onClick","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","icon","apiCategories","categoryName","categoryNumber","OptionsCard","setDifficulty","handleDropdownChange","categoryList","mb","onChange","event","ml","placeholder","App","useState","loading","setLoading","questions","setQuestions","setScore","number","setNumber","userAnswers","setUserAnswers","gameOver","setGameOver","setIsCorrect","setCategory","startTrivia","newQuestions","textAlign","dir","minH","justifySelf","marginBottom","position","boxSize","src","logo","className","length","e","target","undefined","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQ","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fonts","heading","body","breakpoints","createBreakpoints","sm","md","lg","xl","theme","extendTheme","colors","black","textStyles","h1","lineHeight","letterSpacing","h2","icons","path","height","viewBox","fill","xmlns","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ca19eab.chunk.js","sourcesContent":["import { shuffleArray } from \"./components/utility/shuffleArray\";\nexport type Question = {\n\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\nexport type QuestionState = Question & { answers: string[] };\n\n\nexport const fetchQuestions = async (amount: number, difficulty: string, category: string) => {\n\n    const APIendpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(APIendpoint)).json();\n\n\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers,\n            question.correct_answer])\n        }\n    ))\n};\n","export const shuffleArray = (array: any[]) =>\n\n    [...array].sort(() => Math.random() - 0.5);\n","export const decodeSpecialChars = (string: string) => {\n    const hash: { [key: string]: string } = {\n        '&quot;': '\"',\n        '&#039;': \"'\",\n        '&lt;': '<',\n        '&gt;': '>',\n        '&amp': '&',\n    }\n    var re = new RegExp(Object.keys(hash).join('|'), 'gi');\n    let decodedStr = string.replace(re, function (matched) {\n        return hash[matched];\n    });\n    return decodedStr;\n};\n\n","\nimport { Center, Flex } from '@chakra-ui/react'\n\nconst Container = (props) => {\n    return (\n        <Center>\n            <Flex\n                marginTop={'90px'}\n                direction=\"column\"\n                alignItems=\"center\"\n                border='1px'\n                width={['sm', 'md', 'lg', 'xl']}\n                padding={'30px'}\n                boxShadow={'rgba(240, 46, 170, 0.4) -5px 5px, rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px, rgba(240, 46, 170, 0.1) -20px 20px, rgba(240, 46, 170, 0.05) -25px 25px;'}\n                backgroundColor={'#ad1393'}\n                {...props}>\n            </Flex>\n        </Center>\n\n    )\n};\n\nexport default Container;","import { Button, Flex, Heading, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { decodeSpecialChars } from './utility/decodeSpecialChars';\nimport Container from '../components/style/container';\n\n\ntype Props = {\n  question: string;\n  answer: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: any;\n  questionNumber: number;\n  totalQuestions: number;\n  isCorrect: string;\n  score: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answer,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n  isCorrect,\n  score,\n}) => {\n  return (\n    <div>\n      <Container>\n        <Text fontSize={['sm', 'md', 'lg']} >\n          Score : {score}\n          Question: {questionNumber} / {totalQuestions}\n        </Text>\n\n        <Heading>\n          <hr></hr>\n          {decodeSpecialChars(question)}\n        </Heading>\n      </Container>\n      <Flex mt={'50px'} direction={'column'} justifyContent='center' alignContent={'center'}>\n        {answer.map((answer, i) => (\n          <div key={i}>\n            <Button\n              key={i}\n              m={'10px'}\n              width={['sm', 'md', 'lg', 'xl']}\n              fontSize={['sm', 'md', 'lg', 'xl']}\n              colorScheme={isCorrect}\n              disabled={userAnswer}\n              value={answer}\n              onClick={callback}\n            >\n              {decodeSpecialChars(answer)}\n            </Button>\n          </div>\n        ))}\n      </Flex>\n    </div>\n  );\n};\n\nexport default QuestionCard;\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\n\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/quiz.e03f2b79.png\";","const apiCategories = [\n    {\n        categoryName: 'General Knowledge',\n        categoryNumber: '9'\n    },\n    {\n        categoryName: 'Books',\n        categoryNumber: '10'\n    },\n    {\n        categoryName: 'Film',\n        categoryNumber: '11'\n    },\n    {\n        categoryName: 'Music',\n        categoryNumber: '12'\n    },\n    {\n        categoryName: 'Computer Science',\n        categoryNumber: '18'\n    }\n];\n\nexport default apiCategories;","import { Center, RadioGroup, Stack, Radio, Select, Flex, Text } from \"@chakra-ui/react\"\nimport { ChangeEvent } from \"react\";\nimport apiCategories from '../constants/apiCategories'\nimport Container from '../components/style/container'\n\n\ntype Props = {\n    setDifficulty: (e: string) => void\n    handleDropdownChange: (e: ChangeEvent<HTMLSelectElement>) => void\n}\n\nconst OptionsCard: React.FC<Props> = ({ setDifficulty, handleDropdownChange }) => {\n    let categoryList = apiCategories.map((category, i) => {\n        return (\n\n            <option\n                key={i}\n                value={category.categoryNumber}\n            >\n                {category.categoryName}\n            </option>\n\n        )\n    });\n\n    return (\n        <>\n            <Container>\n                <Text fontSize={['sm', 'md', 'lg', 'xl']}>\n                    <Center mb={'20px'}>\n                        Difficulty\n                        <RadioGroup fontSize={['sm', 'md', 'lg', 'xl']} onChange={event => setDifficulty(event)}>\n                            <Stack ml={'15px'} direction='row'>\n                                <Radio value={'easy'}>Easy</Radio>\n                                <Radio value='medium'>Medium</Radio>\n                                <Radio value='hard'>Hard</Radio>\n                            </Stack>\n                        </RadioGroup>\n                    </Center>\n                    <Center>\n                        Category\n                        <Select\n                            width={'200px'}\n                            onChange={handleDropdownChange}\n                            ml={'25px'}\n                            fontSize={['sm', 'md', 'lg']}\n                            placeholder='Select option'>\n                            {categoryList}\n                        </Select>\n                    </Center>\n                </Text>\n            </Container>\n        </>\n    )\n}\n\n\n\nexport default OptionsCard;","import React, { ChangeEvent } from \"react\";\nimport { useState } from \"react\";\nimport { fetchQuestions } from \"./API\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { QuestionState } from \"./API\";\nimport {\n  ChakraProvider,\n  theme,\n  Box,\n  Grid,\n  Button,\n  Center,\n  Image,\n  Badge,\n  Heading\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport logo from './images/quiz.png'\nimport OptionsCard from \"./components/OptionsCard\";\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [score, setScore] = useState(0);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [gameOver, setGameOver] = useState(true);\n  const [isCorrect, setIsCorrect] = useState<string>(\"blue\");\n  const [difficulty, setDifficulty] = useState<string>('')\n  const [category, setCategory] = useState<string>('')\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, difficulty, category);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore((prev) => prev + 1);\n        setIsCorrect(\"green\");\n      } else {\n        setIsCorrect(\"red\");\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setIsCorrect(\"blue\");\n      setNumber(nextQ);\n    }\n  };\n\n  const handleDropdownChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setCategory(e.target.value)\n  }\n\n  return (\n    <>\n\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid dir=\"column\" minH=\"100vh\">\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <Center>\n            <Image marginBottom={'150px'} position={'fixed'} boxSize={['l']} src={logo} />\n          </Center>\n          <div className=\"App\">\n            {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n              <>\n                <OptionsCard\n                  handleDropdownChange={handleDropdownChange}\n                  setDifficulty={setDifficulty}\n                />\n                <Button\n                  m={'30px'}\n                  colorScheme=\"blue\"\n                  className=\"start\"\n                  onClick={startTrivia}\n                >\n                  Start\n                </Button>\n              </>\n            ) : null}\n            <Box marginBottom={'200px'}>\n              {/* {!gameOver ? <Heading mb={'20px'} className=\"score\">Score : {score}</Heading> : null} */}\n              {loading && <p>Loading Questions...</p>}\n              {!loading && !gameOver ? (\n                <QuestionCard\n                  questionNumber={number + 1}\n                  totalQuestions={TOTAL_QUESTIONS}\n                  question={questions[number].question}\n                  answer={questions[number].answers}\n                  userAnswer={userAnswers ? userAnswers[number] : undefined}\n                  callback={checkAnswer}\n                  isCorrect={isCorrect}\n                  score={score}\n                />\n              ) : null}\n              {!gameOver && !loading &&\n                userAnswers.length === number + 1 &&\n                number !== TOTAL_QUESTIONS - 1 ? (\n                <Button className=\"next\" onClick={nextQuestion}>\n                  Next Question\n                </Button>\n              ) : null}\n            </Box>\n          </div>\n\n        </Grid>\n      </Box>\n\n\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from '@chakra-ui/react'\nimport { createBreakpoints } from '@chakra-ui/theme-tools'\n\nconst fonts = {\n    heading: 'Raleway',\n    body: 'Raleway',\n}\n\nconst breakpoints = createBreakpoints({\n    sm: '45em',\n    md: '55em',\n    lg: '65em',\n    xl: '75em',\n})\n\nconst theme = extendTheme({\n    colors: {\n        black: '#16161D',\n    },\n    fonts,\n    breakpoints,\n    textStyles: {\n        h1: {\n            fontSize: '35px',\n            lineHeight: '110%',\n            letterSpacing: '-2%',\n            fonts: fonts\n\n        },\n        h2: {\n            fontSize: '35px',\n            lineHeight: '110%',\n            letterSpacing: '-2%',\n\n        },\n    },\n    icons: {\n        logo: {\n            path: (\n                <svg\n                    width=\"3000\"\n                    height=\"3163\"\n                    viewBox=\"0 0 3000 3163\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <rect width=\"3000\" height=\"3162.95\" fill=\"none\" />\n                    <path\n                        d=\"M1470.89 1448.81L2170 2488.19H820V706.392H2170L1470.89 1448.81ZM1408.21 1515.37L909.196 2045.3V2393.46H1998.84L1408.21 1515.37Z\"\n                        fill=\"currentColor\"\n                    />\n                </svg>\n            ),\n            viewBox: '0 0 3000 3163',\n        },\n    },\n})\n\nexport default theme\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./app.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from './theme'\nimport '@fontsource/raleway/400.css'\nimport '@fontsource/open-sans/700.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}